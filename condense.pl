#
# Copyright (c) 2013 kaytat
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#
# $File: //depot/stoker_git/stoker/tini/examples/stoker/condense.pl $
# $Date: 2013/07/30 $
# $Revision: #2 $
# $Author: kaytat $
#

open INDEX, $ARGV[0] or die "Can't find $ARGV[0]\n";
open INDICES, "> $ARGV[1]";

my $state = 0;
my $str_idx = 0;
my $i;
my @indices;

#
# The additional + 1 for the length is necessary because windows
# adds an extra carriage return (or is it line feed?) to the end
# of the line.
#
while (<INDEX>) {

    if ($state == 0) {
        if (/STOKER_BREAK/) {
            $state = 1;
        }

        # Filter out C++ style comments.  However, since there are other
        # places where // is valid, filter out only those that have a space
        # after the //.
        if (/\/\/ /) {
            next;
        }
        $_ =~ s/^ +//g;
        $_ =~ s/ +/ /g;
        $_ =~ s/^\s+$//g;
        if ($state == 0) {
            if (length($_) > 0) {
                print $_;
                $str_idx += (length($_) + 1);
            }
        }
    }
    if ($state == 1) {
        if (/STOKER_CONTINUE/) {
            $indices[$i] = $str_idx;
            $i++;
            $state = 0;
        }
    }
}

$indices[$i] = $str_idx;
$i++;

my $j;
my $max_distance;

$max_distance = 0;
for ($j = 1; $j < $i; $j++) {
    if ($indices[$j] - $indices[$j -1] > $max_distance) {
        $max_distance = $indices[$j] - $indices[$j -1];
    }
}

print INDICES "// AUTO-GENERATED by condense.pl\n";
print INDICES "package stoker;\n";
print INDICES "import flash.*;\n";
print INDICES "public class Index_Page {\n";
print INDICES "public static final int addr = Flash_Constants.INDEX_LOC;\n";
print INDICES "public static final int max_segment = " . $max_distance . ";\n";
print INDICES "public static final int[] indices = {\n";
print INDICES  "0,\n";

for ($j = 0; $j < $i - 1; $j++) {
    print INDICES  $indices[$j] . ",\n";
}
print INDICES  $indices[$j] . "\n";
print INDICES "};\n";
print INDICES "}\n";

close INDEX;
close INDICES;
